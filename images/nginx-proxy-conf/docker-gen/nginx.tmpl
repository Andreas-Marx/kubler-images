server {
    listen 80 default_server;
    server_name _; # This is just an invalid value which will never trigger on a real hostname.
    error_log /proc/self/fd/2;
    access_log /proc/self/fd/1;
    return 503;
}

map $http_sec_websocket_version $proxy_connection {
        "~\d+" Upgrade;
        default $http_connection;
}

map $http_sec_websocket_version $proxy_upgrade {
        "~\d+" websocket;
        default $http_upgrade;
}

map $upstream_http_upgrade $sent_connection {
        websocket Upgrade;
        default $sent_http_upgrade;
}

{{ $proxynet := coalesce .Env.PROXY_NETWORK "nginxproxy_default"}}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
upstream {{ $host }} {

{{ range $index, $container := $containers }}

    {{ $addrLen := len $container.Addresses }}
    {{ $network := index (where $container.Networks "Name" $proxynet) 0 }}

    {{/* If only 1 port exposed, use that */}}
    {{ if eq $addrLen 1 }}
        {{ with $address := index $container.Addresses 0 }}
            # {{$container.Name}}
            server {{ $network.IP }}:{{ $address.Port }};
        {{ end }}

    {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
    {{ else if $container.Env.VIRTUAL_PORT }}
        {{ range $i, $address := $container.Addresses }}
            {{ if eq $address.Port $container.Env.VIRTUAL_PORT }}
            # {{$container.Name}}
            server {{ $network.IP }}:{{ $address.Port }};
            {{ end }}
        {{ end }}

    {{/* Else default to standard web port 80 */}}
    {{ else }}
        {{ range $i, $address := $container.Addresses }}
            {{ if eq $address.Port "80" }}
            # {{$container.Name}}
            server {{ $network.IP }}:{{ $address.Port }};
            {{ end }}
        {{ end }}
    {{ end }}
{{ end }}
}

{{ range $index, $container := $containers }}
    {{ if $container.Env.VIRTUAL_FORCE_HTTPS }}
server {
    listen 80;
    server_name {{ $host }};
    return 301 https://{{ $host }}$request_uri;
}
    {{ end }}
{{ end }}

server {
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    {{ range $index, $container := $containers }}
    {{ if not $container.Env.VIRTUAL_FORCE_HTTPS }}
    listen 80;
    {{ end }}
    {{ end }}
    listen 443 ssl http2;

    add_header Alternate-Protocol  443:h2;
    #add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

    ssl_certificate /etc/nginx/ssl/{{ $host }}/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/{{ $host }}/nginx.key;

    server_name {{ $host }};
    proxy_buffering off;
    error_log /proc/self/fd/2;
    access_log /proc/self/fd/1;

    location / {
        client_max_body_size 0;
        proxy_pass http://{{ $host }};
        proxy_connect_timeout       10;
        proxy_send_timeout          600;
        proxy_read_timeout          600;
        send_timeout                600;
        #include /etc/nginx/proxy_params;

        # HTTP 1.1 support
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    {{ range $index, $container := $containers }}
        {{ if $container.Env.VIRTUAL_WS_PATH }}
    location {{ $container.Env.VIRTUAL_WS_PATH }} {
        proxy_pass http://{{ $host }};
        proxy_http_version 1.1;
        proxy_set_header Upgrade           $proxy_upgrade;
        proxy_set_header Connection        $proxy_connection;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
        {{end}}
    {{end}}

}
{{ end }}
